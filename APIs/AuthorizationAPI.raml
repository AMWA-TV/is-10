#%RAML 1.0

# AMWA NMOS BCP-003 Security: NMOS Authorization API with JSON Web Tokens (JWTs)
# (c) AMWA 2019

title: NMOS Authorization
baseUri: http://api.example.com/x-nmos/auth/{version}
version: v1.0
mediaType: application/json
securitySchemes:
  basic:
    type: Basic Authentication
    displayName: Basic Authentication (client credentials)
    description: |
      This API supports Basic Authentication using client ID and client secret as username and password credentials.

documentation:
  - title: Overview
    content: |
      The NMOS Authorization API is exposed by an Authorization Server as a standard interface for requesting, revoking,
      and managing tokens and client registration.
  - title: Endpoint Discovery
    content: |
      The Authorization Server URL is discoverable using unicast and/or multicast DNS using the '_nmos-auth._tcp' service name.
  - title: Registering Clients
    content: |
      The `/register_client` endpoint should be protected by some appropriate authentication scheme
      to limit the availability of client-registration to valid clients. This is implementation-specific.
      This may be via the use of user credentials, public/private keys or an initial JWT token.
      This equally may be administered by an enterprise system such as a Single-Sign-On system.
      Please see [RFC7591](https://tools.ietf.org/html/rfc7591).
  - title: Use of HTTPS/TLS
    content: |
      The authorization server MUST require the use of TLS when sending requests using password authentication or
      sending requests to the authorization endpoint. The redirection endpoint SHOULD require the use of TLS
      when the requested response type is "code" or "token".

traits:
  OAuthBasic:
    description: Basic authentication using Client ID and client Secret
    usage: Applied in accordance with RFC 6749
    headers:
      Authorization:
        displayName: OAuth 2.0 Basic Authorization
        description: Colon-seperated, base-64 encoded string, of Client ID and Client Secret
        type: string
        required: true
  AuthorizationCodeRequest:
    queryParameters:
      response_type:
        description: Type of OAuth 2.0 response. MUST be set to "code"
        required: true
        example: response_type=code
      client_id:
        description: The identifier of the client authenticating
        required: true
        example: client_id=s6BhdRkqt3
      redirect_uri:
        description: URI to direct resource owner's user-agent back to clients
        example: redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb
      scope:
        description: The scope of the access request
        required: false
        example: scope=photos
      state:
        description: Value used by client to maintain state between request and callback
        required: false
        example: state=xyz

types:
  TokenAuthorizeRequest:
    properties:
      grant_type:
        description: The OAuth 2.0 grant type of the request
        type: string
        required: true
      code:
        description:  The authorization code received from the authorization server
        type: string
        required: true
      redirect_uri:
        description: Absolute URI used by the auth server to redirect the user-agent, previously established during client registration
        type: string
      client_id:
        description: The identifier of the client authenticating
        type: string
  TokenPasswordRequest:
    properties:
      grant_type:
        description: The OAuth 2.0 grant type of the request
        type: string
        required: true
      username:
        description: Username for the Password Credentials Grant
        type: string
        required: true
      password:
        description: Password for the Password Credentials grant_type
        type: string
        required: true
      scope:
        description: The scope of the access request
        type: string
        required: true
  TokenRefreshRequest:
    properties:
        grant_type:
          description: MUST be set to "refresh_token"
          required: true
        refresh_token:
          description: The refresh token issued to the client inside the bearer token
          required: true
        scope:
          description: The scope of the access request
          required: false
  RevokeRequest:
    properties:
      access_token:
        description: The token (access / refresh) that the client wants to revoke
        required: true
      token_type_hint:
        description: A hint about the type of the token submitted for revocation
        required: true
        enum: [ access_token, refresh_token ]

/:
  displayName: Base Resource
  get:
    description: List of endpoints available from this API.
    responses:
      200:
        body:
          type: !include schemas/authorization-base.json
          example: !include ../examples/base-get-200.json

/register_client:
  displayName: Register Clients Resource
  get:
    description: UI / Web Form for registering details of OAuth 2.0 clients with the Auth Server.
    responses:
      200:
        body:
          text/html:
            type: file
  post:
    description: |
      Resource for registering clients with auth server.

      **Note** - Request examples may render as JSON objects, but should be passed in as "application/x-www-form-urlencoded"
      data types, in accordance with [RFC6749](https://tools.ietf.org/html/rfc6749).
    body:
        type: !include schemas/register_client_request.json
        example: !include ../examples/register-client-post-request.json
    responses:
      201:
        body:
          type: !include schemas/register_client_response.json
          example: !include ../examples/register-client-post-201.json

/token:
  displayName: Request Token Resource
  post:
    description: |
      Method for requesting OAuth 2.0 Bearer Token (Authorization, Password and Refresh Grants.)

      **Note** - The data flow is dependant on the chosen grant type (e.g. password, authorization_code, refresh grant, etc.)

      **Note** - Request examples may render as JSON objects, but should be passed in as the `application/x-www-form-urlencoded`
      MIME type, in accordance with [RFC6749](https://tools.ietf.org/html/rfc6749).
    securedBy: [ basic ]
    is: ["OAuthBasic"]
    body:
      application/x-www-form-urlencoded:
        type: TokenPasswordRequest | TokenAuthorizeRequest | TokenRefreshRequest
        examples:
          PasswordGrant:
            grant_type: password
            username: Joe Bloggs
            password: secret
            scope: photos
          AuthCodeGrant:
            grant_type: authorization_code
            code: SplxlOBeZQQYbYS6WxSbIA
            redirect_uri: "http://client.example.com/"
            client_id: ttwCD9hb4OckmcGDnmC3J3Jr
          RefreshTokenGrant:
            grant_type: refresh_token
            refresh_token: tGzv3JOkF0XG5Qx2TlKWIA
    responses:
      200:
        description: Successful request to obtain a Bearer Token, consisting of the access token and optionally
          a refresh token to be used to request further access tokens.
        body:
          type: !include schemas/token_response.json
          example: !include ../examples/token-post-200.json
      400:
        description: Unsuccessful token requests
        body:
          type: !include schemas/token_error_response.json
          example: !include ../examples/token-post-400.json

/certs:
  displayName: Certificates Resource
  get:
    description: |
      Request the contents of the certs endpoints.

      **Note** - The example array shows a multi-element array for readability purposes only.
      Each element of the array should be a string containing a single, entire certificate.
    responses:
      200:
        description: Successful request to obtain JSON dictionary of available public keys to validate token against.
        body:
          type: !include schemas/certs_response.json
          example: !include ../examples/certs-get-200.json

/authorize:
  displayName: Authorization Code Resource
  get:
    description: The confirmation page enabling the resource owner to approve the client.
    is: ["AuthorizationCodeRequest"]
    responses:
      200:
        description: The client directs the resource owner to this URI using an
                     HTTP redirection response.
        body:
          text/html:
            type: file
  post:
    description: |
      Means of confirming Resource Owner approval
    is: ["AuthorizationCodeRequest"]
    body:
      properties:
        confirm:
          description: |
            Boolean comfirmation of Resource Owner authorization.

            **Note** This is merely an example of one mechanism for obtaining the
            resource owner's approval. This is not covered in an RFC and is implementation-specific.
          type: boolean
          required: true
          example: true
    responses:
      302:
        description: Redirection of endpoint to client URI
        headers:
          Location:
            description: The redirect URI with the Auth Code and State parameters added to the query component of the redirection URI.
            type: string
            required: true
            example: |
              HTTP/1.1 302 Found
              Location: https://client.example.com/cb?code=SplxlOBeZQQYbYS6WxSbIA&state=xyz

/revoke:
  displayName: Token Revocation Resource
  securedBy: basic
  is: ["OAuthBasic"]
  post:
    description: Endpoint for revoking specific access/refresh tokens.
    body:
      application/x-www-form-urlencoded:
        type: RevokeRequest
    responses:
      200:
        description: the token has been revoked successfully or if the client submitted an invalid token.
